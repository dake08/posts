{"version":3,"sources":["http-common.js","services/posts.service.js","components/add-post.component.js","components/post.component.js","components/posts-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","console","log","http","get","id","data","post","put","delete","title","AddPost","props","onChangeTitle","bind","onChangeBody","savePost","newPost","state","body","e","this","setState","target","value","PostDataService","then","response","catch","className","submitted","onClick","htmlFor","type","required","onChange","name","Component","Post","getPost","updatePublished","updatePost","deletePost","currentPost","message","match","params","prevState","status","published","update","history","push","PostsList","retrievePosts","refreshList","setActivePost","removeAllPosts","posts","currentIndex","getAll","index","Array","isArray","map","to","App","href","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f5a88c39.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com/\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nclass PostDataService {\r\n  getAll() {\r\n    console.log('USTUDY');\r\n    return http.get(\"/posts\");\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/posts/${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/posts/\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/posts/${id}`, data);\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/posts/${id}`);\r\n  }\r\n\r\n  findByTitle(title) {\r\n    return http.get(`/posts/?title=${title}`);\r\n  }\r\n}\r\n\r\nexport default new PostDataService();","import React, { Component } from \"react\";\r\nimport PostDataService from \"../services/posts.service\";\r\n\r\nexport default class AddPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeBody = this.onChangeBody.bind(this);\r\n    this.savePost = this.savePost.bind(this);\r\n    this.newPost = this.newPost.bind(this);\r\n\r\n    this.state = {\r\n      id: null,\r\n      title: \"\",\r\n      body: \"\", \r\n    };\r\n  }\r\n\r\n  onChangeTitle(e) {\r\n    this.setState({\r\n      title: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangeBody(e) {\r\n    this.setState({\r\n      body: e.target.value\r\n    });\r\n  }\r\n\r\n  savePost() {\r\n    var data = {\r\n      title: this.state.title,\r\n      body: this.state.body\r\n    };\r\n\r\n    PostDataService.create(data)\r\n      .then(response => {\r\n        this.setState({\r\n          id: response.data.id,\r\n          title: response.data.title,\r\n          body: response.data.body,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  newPost() {\r\n    this.setState({\r\n      id: null,\r\n      title: \"\",\r\n      body: \"\",\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"submit-form\">\r\n        {this.state.submitted ? (\r\n          <div>\r\n            <h4>You submitted successfully!</h4>\r\n            <button className=\"btn btn-success\" onClick={this.newPost}>\r\n              Add\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"title\"\r\n                required\r\n                value={this.state.title}\r\n                onChange={this.onChangeTitle}\r\n                name=\"title\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"body\">Body</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"body\"\r\n                required\r\n                value={this.state.body}\r\n                onChange={this.onChangeBody}\r\n                name=\"body\"\r\n              />\r\n            </div>\r\n\r\n            <button onClick={this.savePost} className=\"btn btn-success\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport PostDataService from \"../services/posts.service\";\r\n\r\nexport default class Post extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeBody = this.onChangeBody.bind(this);\r\n    this.getPost = this.getPost.bind(this);\r\n    this.updatePublished = this.updatePublished.bind(this);\r\n    this.updatePost = this.updatePost.bind(this);\r\n    this.deletePost = this.deletePost.bind(this);\r\n\r\n    this.state = {\r\n      currentPost: {\r\n        id: null,\r\n        title: \"\",\r\n        body: \"\",\r\n      },\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPost(this.props.match.params.id);\r\n  }\r\n\r\n  onChangeTitle(e) {\r\n    const title = e.target.value;\r\n\r\n    this.setState(function(prevState) {\r\n      return {\r\n        currentPost: {\r\n          ...prevState.currentPost,\r\n          title: title\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangeBody(e) {\r\n    const body = e.target.value;\r\n    \r\n    this.setState(prevState => ({\r\n      currentPost: {\r\n        ...prevState.currentPost,\r\n        body: body\r\n      }\r\n    }));\r\n  }\r\n\r\n  getPost(id) {\r\n    PostDataService.get(id)\r\n      .then(response => {\r\n        this.setState({\r\n          currentPost: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updatePublished(status) {\r\n    var data = {\r\n      id: this.state.currentPost.id,\r\n      title: this.state.currentPost.title,\r\n      body: this.state.currentPost.body,\r\n      published: status\r\n    };\r\n\r\n    PostDataService.update(this.state.currentPost.id, data)\r\n      .then(response => {\r\n        this.setState(prevState => ({\r\n          currentPost: {\r\n            ...prevState.currentPost,\r\n            published: status\r\n          }\r\n        }));\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updatePost() {\r\n    PostDataService.update(\r\n      this.state.currentPost.id,\r\n      this.state.currentPost\r\n    )\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          message: \"The post was updated successfully!\"\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  deletePost() {    \r\n    PostDataService.delete(this.state.currentPost.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.props.history.push('/posts')\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentPost } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {currentPost ? (\r\n          <div className=\"edit-form\">\r\n            <h4>Post</h4>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"title\"\r\n                  value={currentPost.title}\r\n                  onChange={this.onChangeTitle}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"body\">Body</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"body\"\r\n                  value={currentPost.body}\r\n                  onChange={this.onChangeBody}\r\n                />\r\n              </div>\r\n\r\n  \r\n            </form>\r\n\r\n            <button\r\n              className=\"btn btn-danger me-2\"\r\n              onClick={this.deletePost}\r\n            >\r\n              Delete\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-success\"\r\n              onClick={this.updatePost}\r\n            >\r\n              Update\r\n            </button>\r\n            <p>{this.state.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Post...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport PostDataService from \"../services/posts.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class PostsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.retrievePosts = this.retrievePosts.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActivePost = this.setActivePost.bind(this);\r\n    this.removeAllPosts = this.removeAllPosts.bind(this);\r\n\r\n    this.state = {\r\n      posts: [],\r\n      currentPost: null,\r\n      currentIndex: -1,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrievePosts();\r\n    console.log(\"SDSDS\");\r\n  }\r\n\r\n  retrievePosts() {\r\n    console.log(\"OQU\");\r\n    PostDataService.getAll()\r\n      .then((response) => {\r\n        this.setState({\r\n          posts: response.data,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    console.log(\"UHUUUU\");\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrievePosts();\r\n    this.setState({\r\n      currentPost: null,\r\n      currentIndex: -1,\r\n    });\r\n  }\r\n\r\n  setActivePost(post, index) {\r\n    this.setState({\r\n      currentPost: post,\r\n      currentIndex: index,\r\n    });\r\n  }\r\n\r\n  removeAllPosts() {}\r\n\r\n  render() {\r\n    const { posts, currentPost, currentIndex } = this.state;\r\n    console.log(posts);\r\n    if (Array.isArray(posts)) {\r\n      console.log(\"YEEEES\");\r\n    }\r\n    if (Array.isArray(posts)) {\r\n      console.log(\"YEEEES\");\r\n    } else {\r\n      console.log(\"NSODOSODSO\");\r\n    }\r\n    return (\r\n      <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\"></div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>Posts List</h4>\r\n\r\n          <ul className=\"list-group\">\r\n            {posts &&\r\n              posts.map((post, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActivePost(post, index)}\r\n                  key={index}\r\n                >\r\n                  {post.title}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllPosts}\r\n          >\r\n            Remove All\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentPost ? (\r\n            <div>\r\n              <h4>Post</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>Title:</strong>\r\n                </label>{\" \"}\r\n                {currentPost.title}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Body:</strong>\r\n                </label>{\" \"}\r\n                {currentPost.body}\r\n              </div>\r\n\r\n              <Link to={\"/posts/\" + currentPost.id} className=\"badge-warning\">\r\n                Click to Edit\r\n              </Link>\r\n              </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Please click on a Post...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddPost from \"./components/add-post.component\";\nimport Post from \"./components/post.component\";\nimport PostsList from \"./components/posts-list.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <a href=\"/posts\" className=\"navbar-brand text-primary ms-5\">\n            Blog\n          </a>\n          <div className=\"navbar-nav me-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/posts\"} className=\"nav-link\">\n                Posts\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/posts\"]} component={PostsList} />\n            <Route exact path=\"/add\" component={AddPost} />\n            <Route path=\"/posts/:id\" component={Post} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}